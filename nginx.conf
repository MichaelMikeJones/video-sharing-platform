user root;
error_log /var/log/nginx/error.log info;
worker_processes 1; 

events {
    worker_connections 4000;
}

rtmp {

    server {
        listen 1935;
        ping 3m;
        ping_timeout 30s;

        chunk_size 4096;

        application live {
            live on;

            allow publish 127.0.0.1;
            allow play 127.0.0.1;
            deny publish all;
            deny play all;

            # requesting to backend
            on_publish 'http://127.0.0.1/api/live/publish';
            on_publish_done 'http://127.0.0.1/api/live/publishDone';

            # TODO: test bitrate
            # TODO: Add recommended start segment in middle of available segments
            # so users won't start playing from start of available segments
            # TODO: Add #EXT-X-PROGRAM-DATE-TIME to stream
            exec nice -n 0 ffmpeg -i rtmp://localhost:1935/$app/$name
                    -g 48 -keyint_min 48 -preset faster -tune zerolatency -codec:v libx264 -filter:v fps=fps=24 -profile:v high -level:v 4.0 -b:v 800k -codec:a aac -b:a 64k -s 640x360 -f flv rtmp://localhost:1935/hls/${name}_low
                    -g 48 -keyint_min 48 -preset faster -tune zerolatency -codec:v libx264 -filter:v fps=fps=24 -profile:v high -level:v 4.0 -b:v 1300k -codec:a aac -b:a 96k -s 1024x576 -f flv rtmp://localhost:1935/hls/${name}_mid
                    -g 48 -keyint_min 48 -preset faster -tune zerolatency -codec:v libx264 -filter:v fps=fps=24 -profile:v high -level:v 4.0 -b:v 2000k -codec:a aac -b:a 128k -s 1366x768 -f flv rtmp://localhost:1935/hls/${name}_hi;
        }

        application hls {
            live on;

            allow publish 127.0.0.1;
            allow play 127.0.0.1;
            deny publish all;
            deny play all;
            
            hls on;
            # where do we save live streaming files
            hls_path /tmp/hls/;
            
            hls_nested on;
            hls_fragment 2s; 
            hls_playlist_length 16s;

            hls_continuous off;
            hls_cleanup on;
            hls_type live;
            wait_key on;

            # CODECS="H.264 High Profile Level 4.0,AAC LC"
            # CODECS="avc1.640028,mp4a.40.2"

            hls_variant _low BANDWIDTH=1000000,AVERAGE-BANDWIDTH=800000,FRAME-RATE=24.000,RESOLUTION=640x360,CODECS="avc1.640028,mp4a.40.2";
            hls_variant _mid BANDWIDTH=1500000,AVERAGE-BANDWIDTH=1300000,FRAME-RATE=24.000,RESOLUTION=1024x576,CODECS="avc1.640028,mp4a.40.2";
            hls_variant _hi  BANDWIDTH=2200000,AVERAGE-BANDWIDTH=2000000,FRAME-RATE=24.000,RESOLUTION=1366x768,CODECS="avc1.640028,mp4a.40.2";
        }

    }

}

http {

    include mime.types;

    gzip on;
    gzip_comp_level 3;
    # only these content types will be compressed
    gzip_types text/css
        text/plain
        text/javascript 
        application/javascript
        application/json
        image/jpeg
        image/png;

    # only responses  bigger that 1kb will be compressed
    gzip_min_length 1024;
    gzip_vary on;
    gzip_proxied any;


    server {
        listen 80;
        server_name 127.0.0.1;

        location ~* /api/live/publish {
            # /api/live/publish
            # /api/live/publishDone
            # above routes are not meant for end users, only rtmp server's requests will get through
            allow 127.0.0.1;
            deny all;
            # change the port to whatever needed
            proxy_pass http://127.0.0.1:5000;
            proxy_set_header Host $host;
            proxy_http_version 1.1;
        }
        location / {
            return 308 https://$host$request_uri;
        }
        
    }


    server {
        
        listen 443 ssl http2;
        server_name 127.0.0.1;

        server_tokens off;

        client_max_body_size 10000M;
        
        # set certificate and key file locations here
        ssl_certificate /etc/nginx/ssl/self.crt;
        ssl_certificate_key /etc/nginx/ssl/self.key;

        ssl_protocols TLSv1.2 TLSv1.3;
        
        ssl_prefer_server_ciphers on;
        ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;

        ssl_dhparam /etc/nginx/ssl/dhparam.pem;

        add_header Strict-Transport-Security "max-age=31536000" always;

        ssl_session_cache shared:SSL:40m;
        ssl_session_timeout 4h;
        ssl_session_tickets on;

        add_header X-Frame-Options "SAMEORIGIN";

        # looks like there is bugs with X-XSS-Protectio  so disabling it
        # add_header X-XSS-Protection "1; mode=block";

        location /hls {
            # route for live streaming files

            # Disable cache
            add_header "Cache-Control" "no-cache";
            # CORS setup
            add_header "Access-Control-Allow-Origin" "*" always;
            add_header "Access-Control-Expose-Headers" "Content-Length";
            # allow CORS preflight requests
            if ($request_method = "OPTIONS") {
                add_header "Access-Control-Allow-Origin" "*";
                add_header "Access-Control-Max-Age" 1728000;
                add_header "Content-Type" "text/plain charset=UTF-8";
                add_header "Content-Length" 0;
                return 204;
            }
            types {
                application/dash+xml mpd;
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
                video/x-flv flv;
                video/mp4 mp4;
                video/webm webm;
            }

            # directory of live streaming files
            # pay attention files should be saved in hls directory which 
            # should be located in below directory 
            root /tmp;
        }

        location /stat {
            # getting statistics
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            # change to wherever the stats file is
            root /usr/local/nginx/html;
        }


        location /storage {
            # route for VOD and thumbnails files

            # Disable cache
            add_header "Cache-Control" "no-cache";
            # CORS setup
            add_header "Access-Control-Allow-Origin" "*" always;
            add_header "Access-Control-Expose-Headers" "Content-Length";
            # allow CORS preflight requests
            if ($request_method = "OPTIONS") {
                add_header "Access-Control-Allow-Origin" "*";
                add_header "Access-Control-Max-Age" 1728000;
                add_header "Content-Type" "text/plain charset=UTF-8";
                add_header "Content-Length" 0;
                return 204;
            }
            types {
                application/dash+xml mpd;
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
                video/x-flv flv;
                video/mp4 mp4;
                video/webm webm;
            }

            root /media/Drive/projects/Youtube/Backend;
        }


        location /public {
            # route for public files
            
            root /media/Drive/projects/Youtube/Backend;
        }


        location /api {
            if ($request_uri ~* /api/live/publish) {
                # /api/live/publish
                # /api/live/publishDone
                # above routes are not meant for end users
                add_header 'Content-Type' 'text/html; charset=utf-8';
                return 403 "Restricted area!";
            }

            # change the port to whatever needed
            proxy_pass http://localhost:5000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }
}
